name: CI (PR)

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:

concurrency:
  group: pr-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build-test:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Install Node so we can run the Playwright workspace locally
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install workspaces
        run: npm ci

      # Build & start the stack (api + web). This respects your root .dockerignore
      - name: Build containers
        run: docker compose -f docker/docker-compose.ci.yml build

      - name: Up stack
        run: docker compose -f docker/docker-compose.ci.yml up -d

      # Optional: wait explicitly for API health (compose has healthchecks too)
      - name: Wait for API health
        run: |
          for i in {1..60}; do
            if curl -sf http://localhost:3001/health > /dev/null; then
              echo "API is healthy"; break
            fi
            echo "Waiting for API..."
            sleep 2
          done

      # Install browsers once (cached across runs by the action)
      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Playwright smoke
        # Run tests and emit dot (console), html (playwright-report/) and junit (xml) outputs.
        run: npm --workspace=@tests/e2e run test -- --reporter=dot,html,junit --output=tests/e2e/test-results
        env:
          BASE_URL: http://localhost:8080

      # Always upload reports/traces if present
      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: |
            # HTML report folder produced by the html reporter
            tests/e2e/playwright-report
            # Full test-results directory (traces, attachments)
            tests/e2e/test-results
            # Any junit/xml files created by the junit reporter
            tests/e2e/test-results/**/*.xml
            **/*.trace.zip
          if-no-files-found: ignore
          retention-days: 14

      # Always bring the stack down
      - name: Tear down
        if: always()
        run: docker compose -f docker/docker-compose.ci.yml down -v